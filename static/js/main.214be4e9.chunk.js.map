{"version":3,"sources":["Components/TransactionHistory/TransactionHistory.module.css","Components/TransactionHistoryItem/TransactionHistoryItem.module.css","Components/Profile/Profile.slyled.js","Components/Profile/Profile.jsx","Components/Statistics/Statistics.slyled.js","Components/Statistics/Statistics.jsx","Components/FriendListItem/FriendListItem.styled.js","Components/FriendListItem/FriendListItem.jsx","Components/FriendList/FriendList.jsx","Components/TransactionHistoryItem/TransactionHistoryItem.jsx","Components/TransactionHistory/TransactionHistory.jsx","App.js","index.js"],"names":["module","exports","CardProfile","styled","div","FirstFont","span","ImgProfile","img","SecondFont","DescriptionDiv","Stats","ul","List","li","Profile","name","tag","location","avatar","stats","src","alt","followers","views","className","likes","SectionStatistics","section","ListItem","Math","floor","random","Statistics","title","filteredArr","reduce","uniqueStats","currentStat","comparisonLabel","find","stat","label","percentage","push","map","defaultProps","Item","Status","isOnline","Img","Name","p","FriendListItem","width","FriendList","friends","class","friend","id","TransactionHistoryItem","type","amount","currency","styles","transaction","TransactionHistory","items","transactionHistory","transactionDescription","transactionDescriptionItem","item","App","user","transactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.214be4e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__D6qrv\",\"transactionDescription\":\"TransactionHistory_transactionDescription__3r7X_\",\"transactionDescriptionItem\":\"TransactionHistory_transactionDescriptionItem__3V3By\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transaction\":\"TransactionHistoryItem_transaction__3QUEI\"};","import styled from \"styled-components\";\nexport const CardProfile = styled.div`\n  border-radius: 2%;\n  width: 250px;\n  height: 100%;\n  border: 1px solid gray;\n  margin: 10px;\n`;\nexport const FirstFont = styled.span`\n  color: black;\n  font-size: 16px;\n  font-family: Cambria, Cochin, Georgia, Times, \"Times New Roman\", serif;\n  display: block;\n  padding: 5px;\n`;\nexport const ImgProfile = styled.img`\n  border-radius: 50%;\n`;\n\nexport const SecondFont = styled.span`\n  color: grey;\n  font-size: 14px;\n  font-family: Cambria, Cochin, Georgia, Times, \"Times New Roman\", serif;\n  display: block;\n  padding: 3px;\n`;\n\nexport const DescriptionDiv = styled.div`\n  text-align: center;\n  background-color: #ffffff;\n  padding: 30px;\n`;\n\nexport const Stats = styled.ul`\n  display: flex;\n  list-style: none;\n  justify-content: pace-around;\n  background-color: lightgray;\n`;\n\nexport const List = styled.li`\n  width: 33.3%;\n  border-top: 0.5px solid gray;\n  border-radius: 2%;\n  &:nth-last-child(n + 2) {\n    border-right: 0.5px solid gray;\n  }\n  text-align: center;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CardProfile } from \"./Profile.slyled\";\nimport { ImgProfile } from \"./Profile.slyled\";\nimport { SecondFont } from \"./Profile.slyled\";\nimport { DescriptionDiv } from \"./Profile.slyled\";\nimport { FirstFont } from \"./Profile.slyled\";\nimport { Stats } from \"./Profile.slyled\";\nimport { List } from \"./Profile.slyled\";\n\nconst Profile = ({ name, tag, location, avatar, stats }) => {\n  return (\n    <CardProfile>\n      <DescriptionDiv>\n        <ImgProfile src={avatar} alt=\"user avatar\" />\n        <FirstFont>{name}</FirstFont>\n        <SecondFont>@{tag}</SecondFont>\n        <SecondFont>{location}</SecondFont>\n      </DescriptionDiv>\n\n      <Stats>\n        <List>\n          <SecondFont>Followers</SecondFont>\n          <FirstFont>{stats.followers}</FirstFont>\n        </List>\n        <List>\n          <SecondFont>Views</SecondFont>\n          <FirstFont>{stats.views}</FirstFont>\n        </List>\n        <List>\n          <SecondFont className=\"label\">Likes</SecondFont>\n          <FirstFont className=\"quantity\">{stats.likes}</FirstFont>\n        </List>\n      </Stats>\n    </CardProfile>\n  );\n};\nexport default Profile;\nProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string,\n  location: PropTypes.string,\n  avatar: PropTypes.string,\n  stats: PropTypes.object,\n};\n\n// name — имя пользователя\n// tag — тег в социальной сети без @\n// location — город и страна\n// avatar — url на изображение\n// stats — объект с информацией об активности\n\n// Profile.defaultProps = {\n//   type: \"card-item__buy-btn\",\n//   img: \"https://i.ibb.co/0jDhL34/51498472915966370-1.jpg\",\n// };\n","import styled from \"styled-components\";\nconst randomColor = () => {\n  return `  rgb(\n      ${Math.floor(Math.random() * 255)},\n      ${Math.floor(Math.random() * 255)},\n      ${Math.floor(Math.random() * 255)}\n    );`;\n};\n\nexport const SectionStatistics = styled.section`\n  border-radius: 2%;\n  width: 270px;\n  height: 100%;\n  border: 1px solid gray;\n  margin: 10px;\n  text-align: center;\n  font-family: Cambria, Cochin, Georgia, Times, \"Times New Roman\", serif;\n  color: gray;\n`;\nexport const FirstFont = styled.span`\n  color: #ffffff;\n  font-size: 14px;\n  display: block;\n  padding: 5px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  list-style: none;\n  justify-content: space-around;\n  background-color: lightgray;\n`;\n\nexport const ListItem = styled.li`\n  width: 25%;\n  background-color: ${() => randomColor()};\n  text-align: center;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SectionStatistics } from \"./Statistics.slyled\";\nimport { ListItem } from \"./Statistics.slyled\";\nimport { List } from \"./Statistics.slyled\";\nimport { FirstFont } from \"./Statistics.slyled\";\n\nconst Statistics = ({ title, stats }) => {\n  const filteredArr = stats.reduce((uniqueStats, currentStat) => {\n    const comparisonLabel = uniqueStats.find(\n      (stat) => stat.label === currentStat.label\n    );\n    if (!comparisonLabel) {\n      uniqueStats.push({ ...currentStat });\n    } else {\n      comparisonLabel.percentage += currentStat.percentage;\n    }\n    return uniqueStats;\n  }, []);\n  return (\n    <SectionStatistics className=\"statistics\">\n      {title && <h2 className=\"title\">{title}</h2>}\n      <List className=\"stat-list\">\n        {filteredArr.map((stat) => (\n          <ListItem className=\"item\" key={stat.label}>\n            <FirstFont className=\"label\">{stat.label}</FirstFont>\n            <FirstFont className=\"percentage\">{stat.percentage}</FirstFont>\n          </ListItem>\n        ))}\n      </List>\n    </SectionStatistics>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.array,\n};\nStatistics.defaultProps = {\n  title: \"UPLOAD STATS\",\n};\n\n//   title - не обязателен, и если он не передан, не должна рендериться разметка заголовка <h2>.\n// stats - массив объектов содержащих информацию о элементе статистики. Может иметь произвольное кол-во элементов.\n// Цвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для генерации случайного цвета.\n","import styled from \"styled-components\";\nexport const Item = styled.li`\n  width: 404px;\n  height: 116px;\n  display: flex;\n  align-items: center;\n  box-shadow: 3px 6px 15px 1px lightgray;\n  margin-bottom: 17px;\n`;\nexport const Status = styled.span`\n  display: block;\n  border-radius: 50%;\n  width: 26px;\n  height: 26px;\n  background-color: ${({ isOnline }) => {\n    if (isOnline) {\n      return \"green\";\n    } else {\n      return \"red\";\n    }\n  }};\n  margin: 10px;\n`;\n\nexport const Img = styled.img`\n  width: 98px;\n  border-radius: 6%;\n  margin: 0 16px 0 16px;\n`;\nexport const Name = styled.p`\n  font-size: 34px;\n  font-weight: 600;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Status } from \"./FriendListItem.styled\";\nimport { Item } from \"./FriendListItem.styled\";\nimport { Img } from \"./FriendListItem.styled\";\nimport { Name } from \"./FriendListItem.styled\";\n\nconst FriendListItem = ({ avatar, name, isOnline }) => {\n  return (\n    <Item>\n      <Status isOnline={isOnline}></Status>\n      <Img src={avatar} alt={name} width=\"48\" />\n      <Name>{name}</Name>\n    </Item>\n  );\n};\n\nexport default FriendListItem;\n\nFriendListItem.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  isOnline: PropTypes.bool.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FriendListItem from \"../FriendListItem/FriendListItem\";\n\nconst FriendList = ({ friends }) => {\n  return (\n    <ul class=\"friend-list\">\n      {friends.map((friend) => (\n        <FriendListItem\n          key={friend.id}\n          avatar={friend.avatar}\n          name={friend.name}\n          isOnline={friend.isOnline}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default FriendList;\n\nFriendList.propTypes = {\n  friends: PropTypes.array.isRequired,\n};\n\n// В зависимости от пропа isOnline,\n// должен меняться цвет фона span.status.\n// Это можно сделать через разный CSS-класс или Styled Components.\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TransactionHistoryItem.module.css\";\n\nconst TransactionHistoryItem = ({ type, amount, currency }) => {\n  return (\n    <tr className={styles.transaction}>\n      <td>{type}</td>\n      <td>{amount}</td>\n      <td>{currency}</td>\n    </tr>\n  );\n};\n\nexport default TransactionHistoryItem;\n\nTransactionHistoryItem.propTypes = {\n  type: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n};\n\n//   id — уникальный идентификатор транзакции\n//   type — тип транзакции\n//   amount - сумма транзакции\n//   currency - тип валюты\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TransactionHistoryItem from \"../TransactionHistoryItem/TransactionHistoryItem\";\nimport styles from \"./TransactionHistory.module.css\";\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={styles.transactionHistory}>\n      <thead>\n        <tr className={styles.transactionDescription}>\n          <th className={styles.transactionDescriptionItem}>Type</th>\n          <th className={styles.transactionDescriptionItem}>Amount</th>\n          <th className={styles.transactionDescriptionItem}>Currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map((item) => (\n          <TransactionHistoryItem\n            key={item.id}\n            type={item.type}\n            amount={item.amount}\n            currency={item.currency}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\nexport default TransactionHistory;\n\nTransactionHistory.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n// \"id\": \"1e0700a2-5183-4291-85cc-2065a036a683\",\n// \"type\": \"invoice\",\n// \"amount\": \"964.82\",\n// \"currency\": \"LRD\"\n","import React from \"react\";\nimport Profile from \"./Components/Profile/Profile\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport FriendList from \"./Components/FriendList/FriendList\";\nimport TransactionHistory from \"./Components/TransactionHistory/TransactionHistory\";\nimport user from \"./db/user.json\";\nimport stats from \"./db/statistical-data.json\";\nimport friends from \"./db/friends.json\";\nimport transactions from \"./db/transactions.json\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <Statistics stats={stats} />\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}